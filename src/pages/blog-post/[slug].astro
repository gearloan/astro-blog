---
import Layout from '../../layouts/Layout.astro';
import RightRail from '../../components/utility/RightRail.astro';
import MostRead from '../../components/shared/MostRead.astro';
import FeaturedStories from '../../components/shared/FeaturedStories.astro';

import { wp } from '../../lib/wp';
import { resolveProseStyle } from '../../lib/resolveProseStyle.js';
import { fetchPosts } from '../../lib/fetchPosts.js';

import { gql } from 'graphql-request';
import { getPost } from '@/lib/queries/postBySlug';
import { pickMediaComponent } from '@/lib/mediaComponent';

// 1) Build-time paths
export async function getStaticPaths() {
  const QUERY = /* GraphQL */ `
    query Slugs {
      posts(first: 100, where: { status: PUBLISH, orderby: { field: DATE, order: DESC } }) {
        nodes { slug }
      }
    }
  `;
  let nodes: Array<{ slug: string }> = [];
  try {
    const data = await wp<{ posts: { nodes: { slug: string }[] } }>(QUERY);
    nodes = data.posts?.nodes ?? [];
  } catch (e) {
    console.error('[getStaticPaths] GraphQL error:', e);
    nodes = [];
  }
  return nodes.map((p) => ({ params: { slug: p.slug } }));
}

// 2) Per-page data
const { slug } = Astro.params;

// use shared query module (includes formatSlug, videoUrl, featuredImage, ACF, etc.)
const { postBy: post } = await getPost(slug);
if (!post) throw new Error(`Post not found for slug: ${slug}`);

// keep your existing featured image derivation (also passed to Media as fallback)
const sizes = post?.featuredImage?.node?.mediaDetails?.sizes ?? [];
const featured_image =
  sizes.find((s: any) => s.name === 'large')?.sourceUrl ?? sizes[0]?.sourceUrl ?? null;

// resolve prose with your helper
const proseStyle = resolveProseStyle(post);

// editorial sidebar content
const mostRead = await fetchPosts({ tag: 'editorial' }, 5);

// media-only slot (video/image based on formatSlug)
const Media = pickMediaComponent(post.formatSlug ?? 'longform');

// OPTIONAL: ACF featured badge flag (if you decide to show it here later)
const slots = post?.magazinePresentationOptions?.presentationSlots ?? [];
const isFeatured =
  Array.isArray(slots) && slots.some((s: any) => String(s).toLowerCase() === 'featured');
---

<Layout proseStyle={proseStyle} section="editorial">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-x-10">
      <article class={`lg:col-span-8 prose ${proseStyle} max-w-none`}>
        <header class="mb-8">
          <!-- If you want the badge here too, uncomment:
          {isFeatured && (
            <span class="inline-block px-3 py-1 text-xs font-semibold tracking-widest border-b-4 border-blue-500 text-blue-600">
              FEATURED
            </span>
          )}
          -->
          <h1 class="dark:text-amber-50" set:html={post.title}></h1>

          <!-- type-specific media (replaces hardcoded <img>) -->
          <div class="w-full my-4">
            <Media post={{ ...post, featuredImageUrl: featured_image }} />
          </div>
        </header>

        <div class="text-lg leading-[1.7] dark:text-amber-50" set:html={post.content ?? ''}></div>
      </article>

      <RightRail>
        <MostRead posts={mostRead} />
        <img src="/images/ad-300x250.jpg" alt="Ad" class="w-full" />
        <FeaturedStories />
      </RightRail>
    </div>
  </div>
</Layout>
