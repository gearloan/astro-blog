---
import Layout from '../../layouts/Layout.astro';
import RightRail from '../../components/utility/RightRail.astro';
import MostRead from '../../components/shared/MostRead.astro';
import FeaturedStories from '../../components/shared/FeaturedStories.astro';
import { wp } from '../../lib/wp';                      // or '@/lib/wp'
import { resolveProseStyle } from '../../lib/resolveProseStyle.js';
import { fetchPosts } from '../../lib/fetchPosts.js';    // keep your existing helper

// 1) Build-time paths
export async function getStaticPaths() {
  const QUERY = /* GraphQL */ `
    query Slugs {
      posts(first: 100, where: { status: PUBLISH, orderby: { field: DATE, order: DESC } }) {
        nodes { slug }
      }
    }
  `;
  let nodes: Array<{ slug: string }> = [];
  try {
    const data = await wp<{ posts: { nodes: { slug: string }[] } }>(QUERY);
    nodes = data.posts?.nodes ?? [];
  } catch (e) {
    console.error('[getStaticPaths] GraphQL error:', e);
    nodes = [];
  }
  return nodes.map((p) => ({ params: { slug: p.slug } }));
}

// 2) Per-page data
const { slug } = Astro.params;

const POST_QUERY = /* GraphQL */ `
  query PostBySlug($slug: String!) {
    postBy(slug: $slug) {
      title
      content
      featuredImage {
        node {
          mediaDetails { sizes { name sourceUrl } }
        }
      }
      presentationSettings { proseStyle }
    }
  }
`;

const { postBy: post } = await wp<{ postBy: any }>(POST_QUERY, { slug });
if (!post) throw new Error(`Post not found for slug: ${slug}`);

const sizes = post?.featuredImage?.node?.mediaDetails?.sizes ?? [];
const featured_image =
  sizes.find((s: any) => s.name === 'large')?.sourceUrl ?? sizes[0]?.sourceUrl ?? null;

const proseStyle = resolveProseStyle(post);

// if your fetchPosts signature is (filters, limit) as you used:
const mostRead = await fetchPosts({ tag: 'editorial' }, 5);
---

<Layout proseStyle={proseStyle} section="editorial">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-x-10">
      <article class={`lg:col-span-8 prose ${proseStyle} max-w-none`}>
        <header class="mb-8">
          <h1 class="dark:text-amber-50" set:html={post.title}></h1>
          {featured_image && (<img src={featured_image} alt={post.title} class="w-full my-4" />)}
        </header>
        <div class="text-lg leading-[1.7] dark:text-amber-50" set:html={post.content}></div>
      </article>
      <RightRail>
        <MostRead posts={mostRead} />
        <img src="/images/ad-300x250.jpg" alt="Ad" class="w-full" />
        <FeaturedStories />
      </RightRail>
    </div>
  </div>
</Layout>
