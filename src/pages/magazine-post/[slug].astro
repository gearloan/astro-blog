---
/* IMPORTS (as you had) */
import Layout from '@/layouts/Layout.astro';
import Sidebar from '@/components/magazine/Sidebar.astro';
import { resolveProseStyle } from '@/lib/resolveProseStyle.js';
import { gql } from 'graphql-request';
import { wp } from '@/lib/wp';
import { getPost } from '@/lib/queries/postBySlug';
import { pickMediaComponent } from '@/lib/mediaComponent';
import { fetchPosts } from '@/lib/fetchPosts.js';

import {
  issueKeyFromDate,
  labelFromIssueKey,
  getIssueTheme,
  getIssueOverrides,
} from '@/data/heroLayouts';

/* BUILD-TIME PATHS (unchanged) */
export async function getStaticPaths() {
  const SLUGS = gql`
    query Slugs {
      posts(first: 100, where: { status: PUBLISH, orderby: { field: DATE, order: DESC } }) {
        nodes { slug }
      }
    }
  `;
  const data = await wp(SLUGS);
  return (data?.posts?.nodes ?? []).map((p: any) => ({ params: { slug: p.slug } }));
}

/* PER-PAGE DATA */
const { slug } = Astro.params;
const { postBy: post } = await getPost(slug);
if (!post) throw new Error(`Post not found: ${slug}`);

const slots = post?.presentationSettings?.presentationSlots ?? [];
const isFeatured = Array.isArray(slots) && slots.some(s => String(s).toLowerCase() === 'featured');

const Media = pickMediaComponent(post.formatSlug ?? 'longform');

// keep your contentGroups fallback for prose
const postForStyle = {
  ...post,
  contentGroups: post.contentGroups ?? { nodes: post.categories?.nodes ?? [] },
};
const proseStyle = resolveProseStyle(postForStyle);

/* PUBLICATION / ISSUE CONTEXT */
const tags = post.tags?.nodes ?? [];
const pub = (tags.find((t: any) => ['turbine', 'pilot'].includes(t.slug))?.slug ?? 'pilot') as
  'pilot' | 'turbine';

const issueKey   = issueKeyFromDate(post.date);
const issueLabel = labelFromIssueKey(issueKey);

// optional theme tokens (only matters if you apply them to style)
const theme = getIssueTheme(pub, { slug: post.slug ?? null, issueKey });

// link back to issue landing
const issueLink = issueKey ? `/${pub}/${issueKey}` : `/${pub}`;

/* Issue posts for pager / ToC */
const allPosts = await fetchPosts({ tag: pub }, 200);
const issuePosts = allPosts
  .filter((p: any) => issueKeyFromDate(p?.date) === issueKey)
  .sort((a: any, b: any) => new Date(a.date).getTime() - new Date(b.date).getTime());

/* COVER IMAGE (with registry override) */
const sizes = post?.featuredImage?.node?.mediaDetails?.sizes ?? [];
const pickFromSizes = (names: string[]) =>
  sizes.find((s: any) => names.includes(s.name))?.sourceUrl ?? null;

const postCover =
  pickFromSizes(['mag-cover', 'cover']) ??
  pickFromSizes(['story-thumb', 'large', 'medium_large', 'medium']) ??
  post?.featuredImage?.node?.sourceUrl ??
  null;

const { coverImg: coverOverride } = getIssueOverrides(pub, { slug: post.slug ?? null, issueKey });
const coverPrimary  = (coverOverride && coverOverride.trim() !== '') ? coverOverride : (postCover ?? null);
const coverFallback = postCover;

post.featuredImageUrl =
  sizes.find((s: any) => s.name === 'large')?.sourceUrl ??
  post?.featuredImage?.node?.sourceUrl ??
  null;
---

<Layout section="magazine" wrapperClass="bg-gray-900 text-amber-50" magazineTitle={post.title}>
  <!-- NEW: expose theme vars to everything inside (sidebar + article area) -->
  <div class="mx-auto px-0 md:px-8" style={theme.vars}>
    <div class="grid min-h-screen grid-cols-1 items-start gap-0 bg-white md:grid-cols-[250px_1fr]">
      <!-- CHANGED: Sidebar now uses dynamic props instead of static meta -->
      <Sidebar
        pub={pub}
        issueInfo={issueLabel}
        coverImg={coverPrimary}
        coverFallback={coverFallback}
        bgColor={theme.bg}
        link={issueLink}
        tocPosts={issuePosts}         
        currentSlug={post.slug}
      />

      <!--  Article content -->
      <article class={`prose max-w-none ${proseStyle}`}>
        <!--  Page-owned header -->
        <header class="mb-8">
          {isFeatured && (
            <span class="pb-0 pr-0 pl-4 md:pl-10 font-subheading text-2xl text-aopa-ltblue relative left-0 top-8 tracking-widest border-b-4 border-aopa-ltblue">
              FEATURED
            </span>
          )}
          <h1 class="pl-4 md:pl-10 font-heading uppercase text-[clamp(2rem,10vw,4rem)] break-words leading-none tracking-tight pt-24">
            {post.title}
          </h1>
          <p class="pl-4 md:pl-10 text-sm text-slate-600">
            By {post.author?.node?.name} Â· {new Date(post.date).toLocaleDateString()}
          </p>
        </header>

        <!--  Type-specific media slot -->
        <section class="mb-8">
          <Media post={post} />
        </section>

        <!--  Page-owned body -->
        <div class="article-body dropcap px-4 md:px-10 pb-12 lg:max-w-[840px] lg:m-auto" set:html={post.content} />

      </article>
    </div>
  </div>
</Layout>
