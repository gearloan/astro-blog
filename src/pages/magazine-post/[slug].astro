---
import Layout from '../../layouts/Layout.astro';
import { resolveProseStyle } from '../../lib/resolveProseStyle.js';
import Sidebar from '../../components/magazine/Sidebar.astro';

export async function getStaticPaths() {
  const res = await fetch('https://aopa-porkbuns.sbs/graphql', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: `
        query {
          posts(first: 100) {
            nodes {
              slug
            }
          }
        }
      `,
    }),
  });

  const { data } = await res.json();
  if (!data?.posts?.nodes) throw new Error('Invalid GraphQL response');

  return data.posts.nodes.map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;

const res = await fetch('https://aopa-porkbuns.sbs/graphql', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    query: `
      query ($slug: String!) {
        postBy(slug: $slug) {
          title
          content
          postPresentationSettings {
            proseStyle
          }
          tags {
            nodes {
              name
              slug
            }
          }
          featuredImage {
            node {
              mediaDetails {
                sizes {
                  name
                  sourceUrl
                }
              }
            }
          }
        }
      }
    `,
    variables: { slug },
  }),
});

const { data } = await res.json();
const post = data?.postBy;
if (!post) throw new Error(`Post not found for slug: ${slug}`);

// Featured image
const sizes = post.featuredImage?.node?.mediaDetails?.sizes;
const featured_image =
  sizes?.find((s) => s.name === 'large')?.sourceUrl ??
  sizes?.[0]?.sourceUrl ??
  null;

// Typography style
const proseStyle = resolveProseStyle(post);

// Determine publication based on tag slug
const tags = post.tags?.nodes ?? [];
let pub = tags.find(t => ['turbine', 'pilot'].includes(t.slug))?.slug ?? 'pilot';

const publicationMeta = {
  pilot: {
    title: 'Pilot Magazine',
    issueInfo: 'Apr 2025 | No. 178',
    coverImg: '/images/proxy/pilot-mag.jpg',
    bgColor: '#003440',
  },
  turbine: {
    title: 'Pilot Turbine Magazine',
    issueInfo: 'Apr 2025 | No. 89',
    coverImg: '/images/proxy/turbine-mag.jpg',
    bgColor: '#00478c',
  },
};

const sidebarMeta = publicationMeta[pub] ?? publicationMeta['pilot'];
---
<Layout section="magazine" wrapperClass="bg-gray-900 text-amber-50" magazineTitle={post.title}>
  <div class="mx-auto px-0 md:px-8">
    <div class="grid grid-cols-1 md:grid-cols-[250px_1fr] gap-0 min-h-screen items-start bg-white">
      <!-- Magazine sidebar -->
      <Sidebar
        publicationTitle={sidebarMeta.title}
        issueInfo={sidebarMeta.issueInfo}
        coverImg={sidebarMeta.coverImg}
        bgColor={sidebarMeta.bgColor}
      />
      
      <!-- Main article content -->
      <article class={`prose ${proseStyle} max-w-none`}>
        <header class="mb-8 relative">
          <span class="pb-0 pr-0 pl-4 md:pl-10 font-subheading text-2xl text-aopa-ltblue relative left-0 top-8 tracking-widest border-b-4 border-aopa-ltblue">
            FEATURE
          </span>
          <h1 class="pl-4 md:pl-10 font-heading uppercase text-6xl tracking-tight pt-24" set:html={post.title}></h1>
          <p class="pl-4 md:pl-10 text-sm">By <b>Melissa Calvert</b></p>
          {featured_image && (
            <img src={featured_image} alt={post.title} class="w-full my-4" />
          )}
        </header>

        <div class="px-4 md:px-10 lg:pr-36" set:html={post.content}></div>
      </article>
    </div>
  </div>
</Layout>
