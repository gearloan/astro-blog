---
/* src/components/sections/PublicationIndex.astro */
import Layout from '@/layouts/Layout.astro';
import Sidebar from '@/components/magazine/Sidebar.astro';
import HeroTitleMobile from '@/components/magazine/HeroTitleMobile.astro';
import HeroBadge from '@/components/magazine/HeroBadge.astro';
import { fetchPosts } from '@/lib/fetchPosts.js';
import { getIssueTheme, getHeroStyles, issueKeyFromDate, labelFromIssueKey, getIssueOverrides } from '@/data/heroLayouts';
// normalize pub from props or params; default to "pilot"
const rawPub = ((Astro.props as any)?.pub ?? (Astro.params as any)?.pub ?? 'pilot') as string;
const pub = rawPub.toLowerCase() as 'pilot' | 'turbine';

// NEW: optional forced issue from props (e.g. /pilot/2024-07 route)
const forcedIssueKey = ((Astro.props as any)?.issueKey ?? null) as string | null;

const { proseStyle = 'prose-magazine' } = (Astro.props as any);

const posts = await fetchPosts({ tag: pub }, 60); // make sure fetchPosts includes `date`
if (!posts?.length) throw new Error(`No posts returned for tag "${pub}"`);

// helpers
const slots = (p: any) =>
  (p?.presentationSettings?.presentationSlots ?? [])
    .map((s: any) => String(s).toLowerCase().trim());
const hasSlot = (p: any, name: string) => slots(p).includes(name);

// ---- Issue selection (by month) ----
const monthOf = (p: any) => issueKeyFromDate(p?.date);
const months = Array.from(new Set(posts.map(monthOf).filter(Boolean as any))).sort().reverse();

// choose current issue
let currentIssueKey: string | null = null;

if (forcedIssueKey) {
  currentIssueKey = forcedIssueKey;
} else if (months.length > 0) {
  currentIssueKey =
    months.find((m) => posts.some((p: any) => monthOf(p) === m && hasSlot(p, 'hero'))) ??
    months[0];
}

// limit to current issue (or all posts if we somehow have no dates)
const issuePosts = currentIssueKey
  ? posts.filter((p: any) => monthOf(p) === currentIssueKey)
  : posts;

// If a forced issue has no posts, bail clearly (404)
if (forcedIssueKey && issuePosts.length === 0) {
  throw new Error(`No posts found for issue ${forcedIssueKey} (${pub})`);
}

// If no posts found for this issue, show a fallback message
if (issuePosts.length === 0) {
  throw new Error(`No posts found for ${pub} magazine`);
}

// ---- Hero + lists (scoped to the issue) ----
const heroStory =
  issuePosts.find((p: any) => hasSlot(p, 'hero')) ??
  issuePosts.find((p: any) => hasSlot(p, 'featured')) ??
  issuePosts[0] ??
  null;

const used = new Set([heroStory?.slug].filter(Boolean));

const issueKey   = issueKeyFromDate(heroStory?.date);   // just 'YYYY-MM' by slicing
const issueLabel = labelFromIssueKey(issueKey);         // uses Date.UTC internally

const issueLink = issueKey ? `/${pub}/${issueKey}` : `/${pub}`;

const featuredStories = issuePosts.filter((p: any) => {
  if (!p?.slug || !p?.title || used.has(p.slug)) return false;
  const ok = hasSlot(p, 'featured');
  if (ok) used.add(p.slug);
  return ok;
});

let teaserStories = issuePosts.filter((p: any) => {
  if (!p?.slug || !p?.title || used.has(p.slug)) return false;
  const ok = hasSlot(p, 'teaser');
  if (ok) used.add(p.slug);
  return ok;
});

// fallback if no teasers: take next 3 unused within the issue
if (teaserStories.length === 0) {
  for (const p of issuePosts as any[]) {
    if (!p?.slug || !p?.title || used.has(p.slug)) continue;
    teaserStories.push(p);
    used.add(p.slug);
    if (teaserStories.length >= 3) break;
  }
}

// hero title lines with sane defaults
const line1 = heroStory?.presentationSettings?.heroTitleLine1 ?? heroStory?.title ?? 'No Title Available';
const line2 = heroStory?.presentationSettings?.heroTitleLine2 ?? '';


// pub-specific sidebar meta (with fallback)
const publicationMeta = {
  pilot:   { publicationTitle: 'Pilot Magazine',         issueInfo: 'Feb 2025 | No. 178', coverImg: '/images/proxy/pilot-mag.jpg',   bgColor: '#003440' },
  turbine: { publicationTitle: 'Pilot Turbine Magazine', issueInfo: 'Feb 2025 | No. 89',  coverImg: '/images/proxy/turbine-mag.jpg', bgColor: '#00478c' },
} as const;
const meta = publicationMeta[pub] ?? publicationMeta.pilot;
if (!publicationMeta[pub]) console.warn(`[PublicationIndex] Unknown pub "${rawPub}", defaulting to "pilot"`);


// ---- COVER IMAGE (fallback from hero, then registry override) ----
const heroSizes = heroStory?.featuredImage?.node?.mediaDetails?.sizes ?? [];
function pick(...names: string[]) {
  const hit = heroSizes.find((s: any) => names.includes(s.name));
  return hit?.sourceUrl ?? null;
}
// Try a few likely size names before falling back to the original sourceUrl
const fallbackCover =
  pick('mag-cover', 'cover') ??
  pick('story-thumb', 'large', 'medium_large', 'medium') ??
  heroStory?.featuredImage?.node?.sourceUrl ??
  null;

// Optional override from registry (per-slug > per-issue)
const { coverImg: coverOverride } = getIssueOverrides(pub, {
  slug: heroStory?.slug ?? null,
  issueKey,
});

const coverImg =
  [coverOverride, fallbackCover, meta.coverImg]
    .find((v) => typeof v === 'string' && v.trim() !== '') ?? null;

const coverPrimary =
  (typeof coverOverride === 'string' && coverOverride.trim() !== '')
    ? coverOverride.trim()
    : (fallbackCover ?? meta.coverImg ?? null);

const coverFallback =
  (fallbackCover ?? meta.coverImg ?? null);

// bg image + per-issue/per-slug CSS vars
const heroBg = heroStory?.featuredImage?.node?.sourceUrl ?? '';
const { headline: heroVars, badge: badgeVars } = getHeroStyles(pub, {
  slug: heroStory?.slug ?? null,
  issueKey: currentIssueKey,
});

const theme = getIssueTheme(pub, { slug: heroStory?.slug ?? null, issueKey });

const heroStyle = [
  heroBg ? `background-image:url('${heroBg}')` : '',
  heroVars,          // --hero-align, --hero-x, --hero-y, --hero-max-w, --accent-*
  badgeVars          // --badge-x, --badge-y
].filter(Boolean).join(';');



// DEBUG (optional):
// console.log(`[${pub}] issue=${currentIssueKey} hero=${heroStory?.slug}`);
---

<Layout section="magazine">
  <div class={`grid grid-cols-1 md:grid-cols-[250px_1fr] min-h-screen relative ${proseStyle}`} style={theme.vars}>
    <Sidebar
      pub={pub}
      issueInfo={issueLabel}
      coverImg={coverPrimary}
      coverFallback={coverFallback}          
      bgColor={theme.bg} 
      link={issueLink}  
      tocPosts={issuePosts}         
    />

    <section class="bg-black text-white">
      {heroStory && (
        <section 
          class="mag-hero relative flex items-center bg-size-[var_201%] lg:bg-size-[var_101%] bg-center bg-no-repeat bg-cover text-white rounded shadow-lg p-6 min-h-[580px]" 
          style={heroStyle}
        >
          <HeroTitleMobile />
          <HeroBadge pub={pub} />

          <!-- Headline block with per-issue vars -->
          <div class="headline-block w-full px-4 hidden md:block" style={heroVars}>
            <span class="opacity-80">
              <span class="text-right inline-block leading-[0.75] uppercase mb-20">
                <h1 class="block font-extrabold tracking-tight p-0 m-0">{line1}</h1>
                <h2 class="block relative font-medium tracking-[0.02em] mt-2 p-0 m-0">
                  <span class="accent-line absolute left-0 w-20 h-1 p-0 m-0"></span>
                  {line2}
                </h2>
              </span>
            </span>
            <ul class="tracking-wide">
              {teaserStories.map((story: any) => (
                <li class="text-3xl uppercase mb-3 hover:opacity-75">
                  <h4><a href={`/magazine-post/${story.slug}`}>{story?.title ?? 'No Title'}</a></h4>
                </li>
              ))}
            </ul>
          </div>
        </section>
      )}

      <!-- Featured Stories -->
      <section class="bg-gray-800 p-10 ">
        <h2 class="inline-block uppercase pb-0 pr-0 pl-10 font-subheading text-2xl
                  text-[var(--issue-primary)]
                  -ml-10 mb-4 mt-4 tracking-widest border-b-4
                  border-b-[var(--issue-primary)]">
          FEATURED
        </h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
          {featuredStories.map((story: any) => {
            const sizes = story.featuredImage?.node?.mediaDetails?.sizes;
            const thumb =
              sizes?.find((s: any) => s.name === 'story-thumb')?.sourceUrl ??
              sizes?.find((s: any) => s.name === 'medium')?.sourceUrl ??
              story.featuredImage?.node?.sourceUrl;

            return (
              <article>
                <a href={`/magazine-post/${story.slug}`}>
                  <div class="relative aspect-video overflow-hidden rounded bg-black">
                    <img
                      src={thumb}
                      alt={story?.title ?? 'Story image'}
                      class="absolute inset-0 block h-full w-full object-cover object-center transform-gpu will-change-transform scale-[1.01]"
                      loading="lazy"
                      decoding="async"
                      width="1600" height="1200"
                      sizes="(min-width:1024px) 33vw, 100vw"
                    />

                  </div>
                </a>

                <a href={`/magazine-post/${story.slug}`}>
                  <h3 class="mb-2 mt-4 text-3xl uppercase">{story?.title ?? 'No Title'}</h3>
                </a>

                <p class="mb-2">
                  {(story.excerpt || '')
                    .replace(/<[^>]*>/g, '')
                    .split(/\s+/)
                    .slice(0, 30)
                    .join(' ') + 'â€¦'}
                </p>
                <a class="text-[#14c682]" href={`/magazine-post/${story.slug}`}>Read more</a>
              </article>
            );
          })}
        </div>
      </section>
    </section>
  </div>
</Layout>
