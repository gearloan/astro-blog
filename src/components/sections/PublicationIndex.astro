---
/* src/components/sections/PublicationIndex.astro */
import Layout from '@/layouts/Layout.astro';
import Sidebar from '@/components/magazine/Sidebar.astro';
import HeroTitleMobilePilot from '@/components/magazine/HeroTitleMobilePilot.astro';
import { fetchPosts } from '@/lib/fetchPosts.js';

const { pub, proseStyle = 'prose-magazine' } = Astro.props as {
  pub: 'pilot' | 'turbine';
  proseStyle?: string;
};
if (!['pilot', 'turbine'].includes(pub)) throw new Error(`Unsupported pub: ${pub}`);

const posts = await fetchPosts({ tag: pub }, 30);
if (!posts?.length) throw new Error(`No posts returned for tag "${pub}"`);

// helpers
const slots = (p: any) =>
  (p?.magazinePresentationOptions?.presentationSlots ?? [])
    .map((s: any) => String(s).toLowerCase().trim());
const hasSlot = (p: any, name: string) => slots(p).includes(name);

// hero: prefer 'hero', then 'featured', else first post
const heroStory =
  posts.find((p: any) => hasSlot(p, 'hero')) ??
  posts.find((p: any) => hasSlot(p, 'featured')) ??
  posts[0];

// build unique lists (exclude hero; avoid dupes across buckets)
const used = new Set([heroStory?.slug].filter(Boolean));

const featuredStories = posts.filter((p: any) => {
  if (!p?.slug || used.has(p.slug)) return false;
  const ok = hasSlot(p, 'featured');
  if (ok) used.add(p.slug);
  return ok;
});

let teaserStories = posts.filter((p: any) => {
  if (!p?.slug || used.has(p.slug)) return false;
  const ok = hasSlot(p, 'teaser');
  if (ok) used.add(p.slug);
  return ok;
});

// fallback if no teasers: take next 3 unused posts
if (teaserStories.length === 0) {
  for (const p of posts as any[]) {
    if (!p?.slug || used.has(p.slug)) continue;
    teaserStories.push(p);
    used.add(p.slug);
    if (teaserStories.length >= 3) break;
  }
}

// hero title lines with sane defaults
const line1 =
  heroStory?.magazinePresentationOptions?.heroTitleLine1 ?? heroStory?.title ?? '';
const line2 = heroStory?.magazinePresentationOptions?.heroTitleLine2 ?? '';

// pub-specific sidebar meta
const publicationMeta = {
  pilot: {
    publicationTitle: 'Pilot Magazine',
    issueInfo: 'Feb 2025 | No. 178',
    coverImg: '/images/proxy/pilot-mag.jpg',
    bgColor: '#003440',
  },
  turbine: {
    publicationTitle: 'Pilot Turbine Magazine',
    issueInfo: 'Feb 2025 | No. 89',
    coverImg: '/images/proxy/turbine-mag.jpg',
    bgColor: '#00478c',
  },
} as const;
const meta = publicationMeta[pub];

// bg image for hero
const heroBg = heroStory?.featuredImage?.node?.sourceUrl ?? '';
---

<Layout section="magazine">
  <div class={`grid grid-cols-1 md:grid-cols-[250px_1fr] min-h-screen relative ${proseStyle}`}>
    <Sidebar
      publicationTitle={meta.publicationTitle}
      issueInfo={meta.issueInfo}
      coverImg={meta.coverImg}
      bgColor={meta.bgColor}
    />

    <section class="bg-black text-white">
      <!-- Hero -->
      {heroStory && (
        <section
          class="relative flex items-center bg-size-[var_201%] lg:bg-size-[var_101%] bg-center text-white rounded shadow-lg p-6 min-h-[540px]"
          style={heroBg ? `background-image: url('${heroBg}');` : undefined}
        >
          <HeroTitleMobilePilot />

          <!-- Headline block -->
          <div class="w-full px-4 hidden md:block">
            <span class="opacity-80">
              <span class="text-[#0aa7b7] text-right inline-block leading-[0.75] uppercase mb-20">
                <h1 class="block font-extrabold tracking-tight p-0 m-0">
                  {line1}
                </h1>
                <h2 class="block relative font-medium tracking-[0.02em]  mt-2 p-0 m-0">
                  <span class="absolute left-0  w-32 h-1 bg-[#368bc4] p-0 m-0"></span>
                  {line2}
                </h2>
              </span>
            </span>
            <ul class="tracking-wide">
              {teaserStories.map((story: any) => (
                <li class="text-3xl uppercase mb-3 hover:opacity-75">
                  <h4>
                    <a href={`/magazine-post/${story.slug}`}>{story.title}</a>
                  </h4>
                </li>
              ))}
            </ul>
          </div>
        </section>
      )}

      <!-- Featured Stories -->
      <section class="bg-gray-800 p-10 ">
        <h2 class="inline-block uppercase pb-0 pr-0 pl-10 font-subheading text-2xl text-aopa-ltblue -ml-10 mb-4 mt-4 tracking-widest border-b-4 border-aopa-ltblue">
          FEATURES
        </h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
          {featuredStories.map((story: any) => {
            const sizes = story.featuredImage?.node?.mediaDetails?.sizes;
            const thumb =
              sizes?.find((s: any) => s.name === 'story-thumb')?.sourceUrl ??
              sizes?.find((s: any) => s.name === 'medium')?.sourceUrl ??
              story.featuredImage?.node?.sourceUrl;

            return (
              <article>
                <a href={`/magazine-post/${story.slug}`}>
                  {/* Aspect wrapper controls the ratio */}
                  <div class="relative aspect-video overflow-hidden rounded">
                    <img
                      src={thumb}
                      alt={story.title}
                      class="absolute inset-0 h-full w-full object-cover"
                      loading="lazy"
                      decoding="async"
                      width="1600" height="1200"
                      sizes="(min-width:1024px) 33vw, 100vw"
                    />
                  </div>
                </a>

                <a href={`/magazine-post/${story.slug}`}>
                  <h3 class="mb-2 mt-4 text-3xl uppercase">{story.title}</h3>
                </a>

                <p class="mb-2">
                  {(story.excerpt || '')
                    .replace(/<[^>]*>/g, '')
                    .split(/\s+/)
                    .slice(0, 30)
                    .join(' ') + 'â€¦'}
                </p>
                <a class="text-[#14c682]" href={`/magazine-post/${story.slug}`}>Read more</a>
              </article>
            );
          })}
        </div>
      </section>
    </section>
  </div>
</Layout>
